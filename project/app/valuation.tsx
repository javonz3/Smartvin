import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Share,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useLocalSearchParams, router } from 'expo-router';
import { ArrowLeft, Car, DollarSign, TrendingUp, TrendingDown, Share2, Download, Bookmark, CircleAlert as AlertCircle, CircleCheck as CheckCircle, Gauge, Fuel, Settings, Calendar, Crown } from 'lucide-react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { VDPVehicleData } from '@/services/vinApi';
import { ValuationService, ValuationResponse } from '@/services/valuationApi';
import { PaywallModal } from '@/components/PaywallModal';
import { useSubscription } from '@/hooks/useSubscription';

export default function Valuation() {
  const params = useLocalSearchParams();
  const [loading, setLoading] = useState(true);
  const [vehicleData, setVehicleData] = useState<VDPVehicleData | null>(null);
  const [valuationData, setValuationData] = useState<ValuationResponse | null>(null);
  const [saved, setSaved] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showPaywall, setShowPaywall] = useState(false);
  const [paywallFeature, setPaywallFeature] = useState<string>('');

  const { isPro, canPerformAction, subscribe } = useSubscription();

  useEffect(() => {
    loadValuationData();
  }, []);

  const loadValuationData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Parse vehicle data from params
      const vehicleDataParam = params.vehicleData as string;
      if (!vehicleDataParam) {
        throw new Error('Vehicle data not provided');
      }

      const parsedVehicleData: VDPVehicleData = JSON.parse(vehicleDataParam);
      setVehicleData(parsedVehicleData);

      // Get AI-powered valuation
      const valuationResult = await ValuationService.getValuation({
        vehicleData: parsedVehicleData,
        mileage: Number(params.mileage),
        condition: params.condition as 'Excellent' | 'Good' | 'Fair' | 'Poor',
        accidentHistory: params.accidentHistory as 'None' | 'Minor' | 'Moderate' | 'Severe',
        zipCode: params.zipCode as string
      });

      if (!valuationResult.success) {
        throw new Error(valuationResult.error || 'Failed to get valuation');
      }

      setValuationData(valuationResult.data!);
    } catch (err) {
      console.error('Valuation error:', err);
      setError(err instanceof Error ? err.message : 'Failed to load valuation data');
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const handleShare = async () => {
    if (!vehicleData || !valuationData) return;

    const shareContent = `${vehicleData.year} ${vehicleData.make} ${vehicleData.model} ${vehicleData.trim}
VIN: ${params.vin}
Mileage: ${Number(params.mileage).toLocaleString()} mi
Condition: ${params.condition}

ðŸ’° AI-Powered Valuations:
â€¢ Wholesale: ${formatCurrency(valuationData.wholesale)}
â€¢ Trade-In: ${formatCurrency(valuationData.tradeIn)}
â€¢ Retail: ${formatCurrency(valuationData.retail)}
â€¢ BHPH: ${formatCurrency(valuationData.bhph)}

ðŸ¤– AI Insight: ${valuationData.aiInsight}

Confidence: ${valuationData.confidence}%
Generated by SmartVIN`;

    try {
      await Share.share({
        message: shareContent,
        title: 'Vehicle Valuation Report',
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const handleExportPDF = async () => {
    const permission = await canPerformAction('pdf_export');
    if (!permission.allowed) {
      setPaywallFeature('pdf_export');
      setShowPaywall(true);
      return;
    }

    // In a real app, this would generate and export a PDF
    Alert.alert('PDF Export', 'PDF report has been generated and saved to your device.');
  };

  const handleSave = () => {
    setSaved(!saved);
    // Here you would save to local storage or API
  };

  const handleSubscribe = async (planId: string) => {
    return await subscribe(planId);
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up':
        return <TrendingUp size={16} color="#059669" />;
      case 'down':
        return <TrendingDown size={16} color="#dc2626" />;
      default:
        return <TrendingUp size={16} color="#6b7280" />;
    }
  };

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'up':
        return '#059669';
      case 'down':
        return '#dc2626';
      default:
        return '#6b7280';
    }
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <ArrowLeft size={24} color="#1e293b" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Processing VIN</Text>
        </View>
        
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#3b82f6" />
          <Text style={styles.loadingText}>Analyzing vehicle data...</Text>
          <Text style={styles.loadingSubtext}>
            Decoding VIN and generating AI-powered valuations
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  if (error || !vehicleData || !valuationData) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <ArrowLeft size={24} color="#1e293b" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Error</Text>
        </View>
        
        <View style={styles.errorContainer}>
          <AlertCircle size={48} color="#ef4444" />
          <Text style={styles.errorTitle}>Unable to Process VIN</Text>
          <Text style={styles.errorText}>
            {error || 'We couldn\'t decode this VIN or generate valuations. Please check the VIN and try again.'}
          </Text>
          <TouchableOpacity
            style={styles.retryButton}
            onPress={() => router.back()}
          >
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <ArrowLeft size={24} color="#1e293b" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Valuation Report</Text>
        <View style={styles.headerActions}>
          <TouchableOpacity
            style={[styles.actionButton, saved && styles.actionButtonActive]}
            onPress={handleSave}
          >
            <Bookmark size={20} color={saved ? '#ffffff' : '#3b82f6'} />
          </TouchableOpacity>
          <TouchableOpacity style={styles.actionButton} onPress={handleShare}>
            <Share2 size={20} color="#3b82f6" />
          </TouchableOpacity>
        </View>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Vehicle Info */}
        <View style={styles.vehicleCard}>
          <LinearGradient
            colors={['#3b82f6', '#1d4ed8']}
            style={styles.vehicleHeader}
          >
            <Car size={32} color="#ffffff" />
            <View style={styles.vehicleInfo}>
              <Text style={styles.vehicleTitle}>
                {vehicleData.year} {vehicleData.make} {vehicleData.model}
              </Text>
              <Text style={styles.vehicleSubtitle}>{vehicleData.trim}</Text>
            </View>
          </LinearGradient>
          
          <View style={styles.vehicleDetails}>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>VIN</Text>
              <Text style={styles.detailValue}>{params.vin}</Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Mileage</Text>
              <Text style={styles.detailValue}>
                {Number(params.mileage).toLocaleString()} mi
              </Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Condition</Text>
              <Text style={styles.detailValue}>{params.condition}</Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Body Style</Text>
              <Text style={styles.detailValue}>{vehicleData.bodyStyle}</Text>
            </View>
            <View style={styles.detailRow}>
              <Text style={styles.detailLabel}>Drivetrain</Text>
              <Text style={styles.detailValue}>{vehicleData.drivetrain}</Text>
            </View>
          </View>
        </View>

        {/* Vehicle Specifications */}
        <View style={styles.specsCard}>
          <Text style={styles.sectionTitle}>Vehicle Specifications</Text>
          <View style={styles.specsGrid}>
            <View style={styles.specItem}>
              <Settings size={20} color="#3b82f6" />
              <Text style={styles.specLabel}>Engine</Text>
              <Text style={styles.specValue}>{vehicleData.engine}</Text>
            </View>
            <View style={styles.specItem}>
              <Gauge size={20} color="#3b82f6" />
              <Text style={styles.specLabel}>Transmission</Text>
              <Text style={styles.specValue}>{vehicleData.transmission}</Text>
            </View>
            <View style={styles.specItem}>
              <Fuel size={20} color="#3b82f6" />
              <Text style={styles.specLabel}>Fuel Economy</Text>
              <Text style={styles.specValue}>
                {vehicleData.combinedMpg > 0 ? `${vehicleData.combinedMpg} MPG` : 'N/A'}
              </Text>
            </View>
            <View style={styles.specItem}>
              <Calendar size={20} color="#3b82f6" />
              <Text style={styles.specLabel}>Original MSRP</Text>
              <Text style={styles.specValue}>
                {vehicleData.msrp > 0 ? formatCurrency(vehicleData.msrp) : 'N/A'}
              </Text>
            </View>
          </View>
        </View>

        {/* Confidence Score */}
        <View style={styles.confidenceCard}>
          <View style={styles.confidenceHeader}>
            <CheckCircle size={24} color="#059669" />
            <Text style={styles.confidenceTitle}>AI Confidence Score</Text>
            <Text style={styles.confidenceScore}>{valuationData.confidence}%</Text>
          </View>
          <View style={styles.confidenceBar}>
            <View
              style={[
                styles.confidenceFill,
                { width: `${valuationData.confidence}%` },
              ]}
            />
          </View>
          <Text style={styles.confidenceText}>
            {valuationData.confidence >= 90 ? 'Very High' : 
             valuationData.confidence >= 80 ? 'High' : 
             valuationData.confidence >= 70 ? 'Good' : 'Moderate'} confidence based on market data and vehicle history
          </Text>
        </View>

        {/* Valuations */}
        <View style={styles.valuationsCard}>
          <Text style={styles.sectionTitle}>AI-Powered Market Valuations</Text>
          
          <View style={styles.valuationGrid}>
            <View style={styles.valuationItem}>
              <Text style={styles.valuationLabel}>Wholesale</Text>
              <Text style={styles.valuationValue}>
                {formatCurrency(valuationData.wholesale)}
              </Text>
              <Text style={styles.valuationDescription}>
                Auction/dealer price
              </Text>
            </View>
            
            <View style={styles.valuationItem}>
              <Text style={styles.valuationLabel}>Trade-In</Text>
              <Text style={styles.valuationValue}>
                {formatCurrency(valuationData.tradeIn)}
              </Text>
              <Text style={styles.valuationDescription}>
                Customer trade value
              </Text>
            </View>
            
            <View style={styles.valuationItem}>
              <Text style={styles.valuationLabel}>Retail</Text>
              <Text style={styles.valuationValue}>
                {formatCurrency(valuationData.retail)}
              </Text>
              <Text style={styles.valuationDescription}>
                Lot retail price
              </Text>
            </View>
            
            <View style={[styles.valuationItem, styles.bhphItem]}>
              <Text style={[styles.valuationLabel, styles.bhphLabel]}>BHPH</Text>
              <Text style={[styles.valuationValue, styles.bhphValue]}>
                {formatCurrency(valuationData.bhph)}
              </Text>
              <Text style={styles.valuationDescription}>
                Buy here pay here
              </Text>
            </View>
          </View>
        </View>

        {/* Market Factors */}
        <View style={styles.factorsCard}>
          <Text style={styles.sectionTitle}>Value Impact Factors</Text>
          <View style={styles.factorsList}>
            <View style={styles.factorItem}>
              <Text style={styles.factorLabel}>Mileage Impact</Text>
              <Text style={[
                styles.factorValue,
                { color: valuationData.factors.mileageImpact >= 0 ? '#059669' : '#dc2626' }
              ]}>
                {valuationData.factors.mileageImpact >= 0 ? '+' : ''}{valuationData.factors.mileageImpact}%
              </Text>
            </View>
            <View style={styles.factorItem}>
              <Text style={styles.factorLabel}>Condition Impact</Text>
              <Text style={[
                styles.factorValue,
                { color: valuationData.factors.conditionImpact >= 0 ? '#059669' : '#dc2626' }
              ]}>
                {valuationData.factors.conditionImpact >= 0 ? '+' : ''}{valuationData.factors.conditionImpact}%
              </Text>
            </View>
            <View style={styles.factorItem}>
              <Text style={styles.factorLabel}>Accident Impact</Text>
              <Text style={[
                styles.factorValue,
                { color: valuationData.factors.accidentImpact >= 0 ? '#059669' : '#dc2626' }
              ]}>
                {valuationData.factors.accidentImpact >= 0 ? '+' : ''}{valuationData.factors.accidentImpact}%
              </Text>
            </View>
            <View style={styles.factorItem}>
              <Text style={styles.factorLabel}>Market Demand</Text>
              <Text style={styles.factorValue}>{valuationData.factors.marketDemand}</Text>
            </View>
          </View>
        </View>

        {/* AI Insights */}
        <View style={styles.insightsCard}>
          <View style={styles.insightsHeader}>
            {getTrendIcon(valuationData.marketTrend)}
            <Text style={styles.sectionTitle}>AI Market Insights</Text>
          </View>
          <Text style={styles.insightsText}>{valuationData.aiInsight}</Text>
          
          <View style={styles.marketTrend}>
            <Text style={styles.trendLabel}>Market Trend</Text>
            <View style={styles.trendIndicator}>
              {getTrendIcon(valuationData.marketTrend)}
              <Text style={[
                styles.trendText,
                { color: getTrendColor(valuationData.marketTrend) }
              ]}>
                {valuationData.marketTrend === 'up' ? 'Trending Up' : 
                 valuationData.marketTrend === 'down' ? 'Trending Down' : 'Stable'}
              </Text>
            </View>
          </View>

          {valuationData.factors.regionalFactors && (
            <View style={styles.regionalFactors}>
              <Text style={styles.regionalTitle}>Regional Insights</Text>
              <Text style={styles.regionalText}>{valuationData.factors.regionalFactors}</Text>
            </View>
          )}
        </View>

        {/* Actions */}
        <View style={styles.actionsCard}>
          <TouchableOpacity style={styles.primaryAction} onPress={handleExportPDF}>
            {!isPro && <Crown size={16} color="#ffffff" style={{ marginRight: 4 }} />}
            <Download size={20} color="#ffffff" />
            <Text style={styles.primaryActionText}>
              {isPro ? 'Export PDF Report' : 'Export PDF (Pro)'}
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.secondaryAction}>
            <DollarSign size={20} color="#3b82f6" />
            <Text style={styles.secondaryActionText}>Calculate Financing</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>

      <PaywallModal
        visible={showPaywall}
        onClose={() => setShowPaywall(false)}
        onSubscribe={handleSubscribe}
        feature={paywallFeature}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#f1f5f9',
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
    flex: 1,
    textAlign: 'center',
    marginHorizontal: 16,
  },
  headerActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#eff6ff',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#3b82f6',
  },
  actionButtonActive: {
    backgroundColor: '#3b82f6',
  },
  loadingContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  loadingText: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
    marginTop: 20,
  },
  loadingSubtext: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#64748b',
    textAlign: 'center',
    marginTop: 8,
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 40,
  },
  errorTitle: {
    fontSize: 20,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
    marginTop: 20,
  },
  errorText: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#64748b',
    textAlign: 'center',
    marginTop: 12,
    lineHeight: 24,
  },
  retryButton: {
    backgroundColor: '#3b82f6',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 12,
    marginTop: 24,
  },
  retryButtonText: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#ffffff',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  vehicleCard: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
    overflow: 'hidden',
  },
  vehicleHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    gap: 16,
  },
  vehicleInfo: {
    flex: 1,
  },
  vehicleTitle: {
    fontSize: 20,
    fontFamily: 'Inter-Bold',
    color: '#ffffff',
  },
  vehicleSubtitle: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#e0e7ff',
    marginTop: 4,
  },
  vehicleDetails: {
    padding: 20,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f1f5f9',
  },
  detailLabel: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#64748b',
  },
  detailValue: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
  },
  specsCard: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  specsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 16,
  },
  specItem: {
    flex: 1,
    minWidth: '45%',
    alignItems: 'center',
    backgroundColor: '#f8fafc',
    borderRadius: 12,
    padding: 16,
  },
  specLabel: {
    fontSize: 12,
    fontFamily: 'Inter-Medium',
    color: '#64748b',
    marginTop: 8,
    marginBottom: 4,
  },
  specValue: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
    textAlign: 'center',
  },
  confidenceCard: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  confidenceHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    marginBottom: 16,
  },
  confidenceTitle: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
    flex: 1,
  },
  confidenceScore: {
    fontSize: 18,
    fontFamily: 'Inter-Bold',
    color: '#059669',
  },
  confidenceBar: {
    height: 8,
    backgroundColor: '#e2e8f0',
    borderRadius: 4,
    marginBottom: 12,
  },
  confidenceFill: {
    height: '100%',
    backgroundColor: '#059669',
    borderRadius: 4,
  },
  confidenceText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#64748b',
  },
  valuationsCard: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
    marginBottom: 20,
  },
  valuationGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 16,
  },
  valuationItem: {
    flex: 1,
    minWidth: '45%',
    backgroundColor: '#f8fafc',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
  },
  bhphItem: {
    backgroundColor: '#ecfdf5',
    borderWidth: 1,
    borderColor: '#059669',
  },
  valuationLabel: {
    fontSize: 12,
    fontFamily: 'Inter-Medium',
    color: '#64748b',
    marginBottom: 8,
  },
  bhphLabel: {
    color: '#059669',
  },
  valuationValue: {
    fontSize: 20,
    fontFamily: 'Inter-Bold',
    color: '#1e293b',
    marginBottom: 4,
  },
  bhphValue: {
    color: '#059669',
  },
  valuationDescription: {
    fontSize: 12,
    fontFamily: 'Inter-Regular',
    color: '#64748b',
    textAlign: 'center',
  },
  factorsCard: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  factorsList: {
    gap: 12,
  },
  factorItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
  },
  factorLabel: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#64748b',
  },
  factorValue: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
  },
  insightsCard: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  insightsHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    marginBottom: 16,
  },
  insightsText: {
    fontSize: 16,
    fontFamily: 'Inter-Regular',
    color: '#374151',
    lineHeight: 24,
    marginBottom: 20,
  },
  marketTrend: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#f1f5f9',
  },
  trendLabel: {
    fontSize: 14,
    fontFamily: 'Inter-Medium',
    color: '#64748b',
  },
  trendIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  trendText: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
  },
  regionalFactors: {
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#f1f5f9',
  },
  regionalTitle: {
    fontSize: 14,
    fontFamily: 'Inter-SemiBold',
    color: '#1e293b',
    marginBottom: 8,
  },
  regionalText: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#64748b',
    lineHeight: 20,
  },
  actionsCard: {
    backgroundColor: '#ffffff',
    borderRadius: 16,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
    gap: 12,
  },
  primaryAction: {
    backgroundColor: '#3b82f6',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    borderRadius: 12,
    gap: 8,
  },
  primaryActionText: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#ffffff',
  },
  secondaryAction: {
    backgroundColor: '#eff6ff',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#3b82f6',
    gap: 8,
  },
  secondaryActionText: {
    fontSize: 16,
    fontFamily: 'Inter-SemiBold',
    color: '#3b82f6',
  },
});